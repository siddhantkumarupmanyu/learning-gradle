now i understand what gradle docs means, when they/it said,
typically you get these tasks from plugins...
like, java plugin provides me with all those build tasks...
and all that depends and everything in that...
i get it...

and gradle is responsible for creating that graph, which they are so much proud of... lol...


idk, if it's good to compare or is it even a direct comparison with CMake,
but i am finding it to be similar...
CMake is a build generator, which generates build scripts for other build systems, make, ninja whatever...
like same that is also a configuration just like how these gradle guys are saying,
.build .build.kts are not build files as such they are configuration files,
same as CMake files...
but this much more elegant(too early to say, lol)
but yeah, gradle system parses the build files creates the configurations, graph and then executes them in the next phase...


also, just to add we have java apis/kotlin apis available here with the DSL gradle provides...
also, just to compare it to maven, i do not understand all the maven, but what i can see,
is here, we don't have that lifecycle hooks.
like goals and stuff. you create your own stuff...
and i get it now, why they are comparing it with ant and not directly with maven here https://docs.gradle.org/current/userguide/tutorial_using_tasks.html
cause maven have that life cycle and stuff, which ant does not, and nor does gradle...
so, there are no lifecycle hooks...

https://docs.gradle.org/current/userguide/kotlin_dsl.html
this is good resource, and they even say looking at the source code of the plugin should/can be the last thing...



even the SourceSets
https://docs.gradle.org/current/userguide/plugins.html

Core Gradle plugins are special in that they provide short names, such as 'java' for the core JavaPlugin


https://docs.gradle.org/current/userguide/more_about_tasks.html
What happens if only one source file changes? Does the task process all the source files again or just the modified one? That depends on the task implementation. If the latter, then the task itself is incremental, but that’s a different feature to the one we’re discussing here. Gradle does help task implementers with this via its incremental task inputs feature.


https://docs.gradle.org/current/userguide/declaring_dependencies.html
this is getting complicated...
it's fine till plugins and stuff, with dependencies, things are getting/gets complicated...
configurations pain in the...

so is incremental compilation different than build cache?? or they like compliment each other...
ok, By default, the build cache is not enabled. but incremental build is, if i am right...
https://docs.gradle.org/current/userguide/build_cache.html#sec:task_output_caching
incremental build <==> task output cache
incremental build requirement for build cache.


